@model System.Data.DataTable


@{
    // Yekun dəyərləri hesabla
    decimal totalBalance = 0;

    foreach (System.Data.DataRow row in Model.Rows)
    {
        if (row["Initial_Balance"] != DBNull.Value)
            totalBalance += Convert.ToDecimal(row["Initial_Balance"]);
    }

}

@{
    var balances = new List<decimal>();
    var names = new List<string>();

    foreach (System.Data.DataRow row in Model.Rows)
    {
        decimal balance = row["Initial_Balance"] != DBNull.Value ? Convert.ToDecimal(row["Initial_Balance"]) : 0;
        balances.Add(balance);
        names.Add(row["name"].ToString());
    }

}

@{
    decimal totalDebet = 0;

    foreach (System.Data.DataRow row in Model.Rows)
    {
        if (row["Debet"] != DBNull.Value)
            totalDebet += Convert.ToDecimal(row["Debet"]); // <-- burada doğru dəyişəni istifadə et
    }


}

@{
    var Debetbalances = new List<decimal>();
    var Debetnames = new List<string>();

    foreach (System.Data.DataRow row in Model.Rows)
    {
        decimal balance = row["Debet"] != DBNull.Value ? Convert.ToDecimal(row["Debet"]) : 0;
        Debetbalances.Add(balance);
        Debetnames.Add(row["name"].ToString());
    }

}

@{
    decimal totalCredit = 0;

    foreach (System.Data.DataRow row in Model.Rows)
    {
        if (row["Credit"] != DBNull.Value)
            totalCredit += Convert.ToDecimal(row["Credit"]); // <-- burada doğru dəyişəni istifadə et
    }


}

@{
    var Creditbalances = new List<decimal>();
    var Creditnames = new List<string>();

    foreach (System.Data.DataRow row in Model.Rows)
    {
        decimal balance = row["Credit"] != DBNull.Value ? Convert.ToDecimal(row["Credit"]) : 0;
        Creditbalances.Add(balance);
        Creditnames.Add(row["name"].ToString());
    }

}

@{
    decimal totalSonQaliq = 0;

    foreach (System.Data.DataRow row in Model.Rows)
    {
        if (row["SonQaliq"] != DBNull.Value)
            totalSonQaliq += Convert.ToDecimal(row["SonQaliq"]); // <-- burada doğru dəyişəni istifadə et
    }


}

@{
    var SonQaliqbalances = new List<decimal>();
    var SonQaliqnames = new List<string>();

    foreach (System.Data.DataRow row in Model.Rows)
    {
        decimal balance = row["SonQaliq"] != DBNull.Value ? Convert.ToDecimal(row["SonQaliq"]) : 0;
        SonQaliqbalances.Add(balance);
        SonQaliqnames.Add(row["name"].ToString());
    }

}


@{
    var initialRows = Model.Rows.Cast<System.Data.DataRow>()
                    .Where(r => r["Initial_Balance"] != DBNull.Value)
                    .ToList();

    var debetRows = Model.Rows.Cast<System.Data.DataRow>()
                    .Where(r => r["Debet"] != DBNull.Value)
                    .ToList();

    var creditRows = Model.Rows.Cast<System.Data.DataRow>()
                .Where(r => r["Credit"] != DBNull.Value)
                .ToList();

    var SonQaliqRows = Model.Rows.Cast<System.Data.DataRow>()
                .Where(r => r["SonQaliq"] != DBNull.Value)
                .ToList();
}


@{
    var type1 = Context.Request.Query["type"].FirstOrDefault() ?? "InitialBalance";

    List<string> exportNames = new List<string>();
    List<decimal> exportValues = new List<decimal>();
    decimal exportTotal = 0;

    if (type1 == "InitialBalance")
    {
        foreach (var row in initialRows)
        {
            exportNames.Add(row["name"].ToString());
            exportValues.Add(row["Initial_Balance"] != DBNull.Value ? Convert.ToDecimal(row["Initial_Balance"]) : 0);
        }
    }
    else if (type1 == "Debet")
    {
        foreach (var row in debetRows)
        {
            exportNames.Add(row["name"].ToString());
            exportValues.Add(row["Debet"] != DBNull.Value ? Convert.ToDecimal(row["Debet"]) : 0);
        }
    }
    else if (type1 == "Credit")
    {
        foreach (var row in creditRows)
        {
            exportNames.Add(row["name"].ToString());
            exportValues.Add(row["Credit"] != DBNull.Value ? Convert.ToDecimal(row["Credit"]) : 0);
        }
    }
    else if (type1 == "SonQaliq")
    {
        foreach (var row in SonQaliqRows)
        {
            exportNames.Add(row["name"].ToString());
            exportValues.Add(row["SonQaliq"] != DBNull.Value ? Convert.ToDecimal(row["SonQaliq"]) : 0);
        }
    }


    exportTotal = exportValues.Sum();
}
<script>
    const exportNames = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(exportNames));
    const exportValues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(exportValues));
    const exportTotal = @exportTotal;
    const currentType = "@type1";
</script>





<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>

<div style="text-align: right; margin: 15px;">
    <button class="btn btn-danger" onclick="exportDashboardPDF()">Export to PDF</button>
    <button class="btn btn-success" onclick="exportDashboardExcel()">Export to Excel</button>
</div>

<script>
    async function exportDashboardPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF('p', 'pt', 'a4');

        // Yalnız balans cədvəlini götürək
        const dashboard = document.querySelector('.balance-container');
        const canvas = await html2canvas(dashboard, { scale: 2 });

        const imgData = canvas.toDataURL('image/png');
        const pdfWidth = doc.internal.pageSize.getWidth();
        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

        doc.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
        doc.save("Dashboard.pdf");
    }
</script>
<script>
       function exportDashboardExcel() {
        var wb = XLSX.utils.book_new();
        var data = [];

        if (currentType === "InitialBalance") {
            data.push(["Name", "Initial Balance"]);
        } else if (currentType === "Debet") {
            data.push(["Name", "Debet"]);
        }
        else if (currentType === "Credit") {
            data.push(["Name", "Credit"]);
        }
        else if (currentType === "SonQaliq") {
            data.push(["Name", "SonQaliq"]);
        }

        for (let i = 0; i < exportNames.length; i++) {
            data.push([exportNames[i], exportValues[i]]);
        }

        data.push(["Yekun", exportTotal]);

        var ws = XLSX.utils.aoa_to_sheet(data);
        XLSX.utils.book_append_sheet(wb, ws, "Dashboard");
        XLSX.writeFile(wb, "Dashboard.xlsx");
    }


</script>



@{
    // URL-dən type query parametresini oxuyuruq
    var type = Context.Request.Query["type"].FirstOrDefault() ?? "";
}




<div class="balance-container">
    @if (type == "InitialBalance")
    {
        <h2>💰 Bank və Kassa Balansları</h2>
        <table class="custom-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Initial Balance</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in initialRows)
                {
                    <tr>
                        <td>@row["name"]</td>
                        <td>@row["Initial_Balance"]</td>
                    </tr>
                }
                <tr class="total-row">
                    <td><strong>Yekun</strong></td>
                    <td class="balance"><strong>@totalBalance</strong></td>
                </tr>
            </tbody>
        </table>
    }
    else if (type == "Debet")
    {
        <h2>💰 Bank və Kassa Çıxışları (Debet)</h2>
        <table class="custom-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Debet</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in debetRows)
                {
                    <tr>
                        <td>@row["name"]</td>
                        <td>@row["Debet"]</td>
                    </tr>
                }
                <tr class="total-row">
                    <td><strong>Yekun</strong></td>
                    <td class="debet"><strong>@totalDebet</strong></td>
                </tr>
            </tbody>
        </table>
    }
    else if(type=="Credit")
    {
        <h2>💰 Bank və Kassa Çıxışları</h2>
        <table class="custom-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Credit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in creditRows)
                {
                    <tr>
                        <td>@row["name"]</td>
                        <td>@row["Credit"]</td>
                    </tr>
                }
                <tr class="total-row">
                    <td><strong>Yekun</strong></td>
                    <td class="credit"><strong>@totalCredit</strong></td>
                </tr>
            </tbody>
        </table>
    }
    else if (type == "SonQaliq")
    {
        <h2>💰 Bank və Kassa Çıxışları</h2>
        <table class="custom-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>SonQaliq</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var row in SonQaliqRows)
                {
                    <tr>
                        <td>@row["name"]</td>
                        <td>@row["SonQaliq"]</td>
                    </tr>
                }
                <tr class="total-row">
                    <td><strong>Yekun</strong></td>
                    <td class="sonqaliq"><strong>@totalSonQaliq</strong></td>
                </tr>
            </tbody>
        </table>
    }
</div>

<style>
    .balance-container {
        max-width: 900px;
        margin: 30px auto;
        padding: 20px;
        background: #fdfdfd;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

        .balance-container h2 {
            text-align: center;
            margin-bottom: 20px;
            font-weight: 700;
            color: #333;
            letter-spacing: 1px;
        }

    .custom-table {
        width: 100%;
        border-collapse: collapse;
        overflow: hidden;
        border-radius: 12px;
    }

        .custom-table thead {
            background: linear-gradient(45deg, #2c3e50, #3498db);
            color: #fff;
            font-size: 16px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .custom-table th, .custom-table td {
            padding: 14px 18px;
            text-align: center;
            border-bottom: 1px solid #eaeaea;
        }

        .custom-table tbody tr:hover {
            background: #f1f9ff;
            transform: scale(1.01);
            transition: all 0.2s ease-in-out;
        }


    .total-row td {
        font-weight: bold;
        background-color: #ecf0f1;
    }
</style>